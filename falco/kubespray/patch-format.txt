kube-apiserver.yaml
apiVersion: v1
kind: Pod
metadata:
  annotations:
    kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint: 135.21.180.108:6443
  creationTimestamp: null
  labels:
    component: kube-apiserver
    tier: control-plane
  name: kube-apiserver
  namespace: kube-system
spec:
  containers:
  - command:
    - kube-apiserver
    - --advertise-address=135.21.180.108
    - --allow-privileged=true
    - --anonymous-auth=True
    - --apiserver-count=3
    - --audit-log-maxage=2
    - --audit-log-maxbackup=2
    - --audit-log-maxsize=100
    - --audit-log-path=/opt/app/audit/kube-apiserver-log.json
    - --audit-policy-file=/etc/kubernetes/audit-policy/apiserver-audit-policy.yaml
    - --authorization-mode=Node,RBAC
    - --bind-address=0.0.0.0
    - --client-ca-file=/etc/kubernetes/ssl/ca.crt
    - --default-not-ready-toleration-seconds=300
    - --default-unreachable-toleration-seconds=300
    - --enable-admission-plugins=NodeRestriction,PodSecurity
    - --enable-aggregator-routing=False
    - --enable-bootstrap-token-auth=true
    - --endpoint-reconciler-type=lease
    - --etcd-cafile=/etc/ssl/etcd/ssl/ca.pem
    - --etcd-certfile=/etc/ssl/etcd/ssl/node-nasdcu4ncm04.pem
    - --etcd-compaction-interval=5m0s
    - --etcd-keyfile=/etc/ssl/etcd/ssl/node-nasdcu4ncm04-key.pem
    - --etcd-servers=https://135.21.180.108:2379,https://135.21.180.109:2379,https://135.21.180.110:2379
    - --event-ttl=1h0m0s
    - --kubelet-client-certificate=/etc/kubernetes/ssl/apiserver-kubelet-client.crt
    - --kubelet-client-key=/etc/kubernetes/ssl/apiserver-kubelet-client.key
    - --kubelet-preferred-address-types=InternalDNS,InternalIP,Hostname,ExternalDNS,ExternalIP
    - --oidc-client-id=kubernetes
    - --oidc-groups-claim=groups
    - --oidc-groups-prefix=
    - --oidc-issuer-url=https://ndcu-dex-nasa-dev-01.dcu.idns.cip.att.com:30271/dex
    - --oidc-username-claim=email
    - --oidc-username-prefix=-
    - --profiling=False
    - --proxy-client-cert-file=/etc/kubernetes/ssl/front-proxy-client.crt
    - --proxy-client-key-file=/etc/kubernetes/ssl/front-proxy-client.key
    - --request-timeout=1m0s
    - --requestheader-allowed-names=front-proxy-client
    - --requestheader-client-ca-file=/etc/kubernetes/ssl/front-proxy-ca.crt
    - --requestheader-extra-headers-prefix=X-Remote-Extra-
    - --requestheader-group-headers=X-Remote-Group
    - --requestheader-username-headers=X-Remote-User
    - --secure-port=6443
    - --service-account-issuer=https://kubernetes.default.svc.cluster.local
    - --service-account-key-file=/etc/kubernetes/ssl/sa.pub
    - --service-account-lookup=True
    - --service-account-signing-key-file=/etc/kubernetes/ssl/sa.key
    - --service-cluster-ip-range=10.233.0.0/18
    - --service-node-port-range=30000-32767
    - --storage-backend=etcd3
    - --tls-cert-file=/etc/kubernetes/ssl/apiserver.crt
    - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
    - --tls-private-key-file=/etc/kubernetes/ssl/apiserver.key
    image: artifact.it.att.com/apm0012178-dkr-mcom-group/kube-apiserver:v1.31.4
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 8
      httpGet:
        host: 135.21.180.108
        path: /livez
        port: 6443
        scheme: HTTPS
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 15
    name: kube-apiserver
    readinessProbe:
      failureThreshold: 3
      httpGet:
        host: 135.21.180.108
        path: /readyz
        port: 6443
        scheme: HTTPS
      periodSeconds: 1
      timeoutSeconds: 15
    resources:
      requests:
        cpu: 250m
    startupProbe:
      failureThreshold: 24
      httpGet:
        host: 135.21.180.108
        path: /livez
        port: 6443
        scheme: HTTPS
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 15
    volumeMounts:
    - mountPath: /opt/app/audit
      name: audit-logs
    - mountPath: /etc/kubernetes/audit-policy
      name: audit-policy
    - mountPath: /etc/ssl/certs
      name: ca-certs
      readOnly: true
    - mountPath: /etc/ca-certificates
      name: etc-ca-certificates
      readOnly: true
    - mountPath: /etc/ssl/etcd/ssl
      name: etcd-certs-0
      readOnly: true
    - mountPath: /etc/kubernetes/ssl
      name: k8s-certs
      readOnly: true
    - mountPath: /etc/kubernetes/tokens
      name: token-auth-config
    - mountPath: /usr/local/share/ca-certificates
      name: usr-local-share-ca-certificates
      readOnly: true
    - mountPath: /usr/share/ca-certificates
      name: usr-share-ca-certificates
      readOnly: true
  hostNetwork: true
  priority: 2000001000
  priorityClassName: system-node-critical
  securityContext:
    seccompProfile:
      type: RuntimeDefault
  volumes:
  - hostPath:
      path: /opt/app/audit
      type: ""
    name: audit-logs
  - hostPath:
      path: /etc/kubernetes/audit-policy
      type: ""
    name: audit-policy
  - hostPath:
      path: /etc/ssl/certs
      type: DirectoryOrCreate
    name: ca-certs
  - hostPath:
      path: /etc/ca-certificates
      type: DirectoryOrCreate
    name: etc-ca-certificates
  - hostPath:
      path: /etc/ssl/etcd/ssl
      type: DirectoryOrCreate
    name: etcd-certs-0
  - hostPath:
      path: /etc/kubernetes/ssl
      type: DirectoryOrCreate
    name: k8s-certs
  - hostPath:
      path: /etc/kubernetes/tokens
      type: ""
    name: token-auth-config
  - hostPath:
      path: /usr/local/share/ca-certificates
      type: DirectoryOrCreate
    name: usr-local-share-ca-certificates
  - hostPath:
      path: /usr/share/ca-certificates
      type: ""
    name: usr-share-ca-certificates
status: {}
# set -o vi
# vi kube-apiserver.yaml
# vi kube-apiserver.yaml
        port: 6443
        scheme: HTTPS
      periodSeconds: 1
      timeoutSeconds: 15
    resources:
      requests:
        cpu: 250m
    startupProbe:
      failureThreshold: 24
      httpGet:
        host: 135.21.180.108
        path: /livez
        port: 6443
        scheme: HTTPS
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 15
    volumeMounts:
    - mountPath: /opt/app/audit
      name: audit-logs
    - mountPath: /etc/kubernetes/audit-policy
      name: audit-policy
    - mountPath: /etc/ssl/certs
      name: ca-certs
      readOnly: true
    - mountPath: /etc/ca-certificates
      name: etc-ca-certificates
      readOnly: true
    - mountPath: /etc/ssl/etcd/ssl
      name: etcd-certs-0
      readOnly: true
    - mountPath: /etc/kubernetes/ssl
      name: k8s-certs
      readOnly: true
    - mountPath: /etc/kubernetes/tokens
      name: token-auth-config
    - mountPath: /usr/local/share/ca-certificates
      name: usr-local-share-ca-certificates
      readOnly: true
    - mountPath: /usr/share/ca-certificates
      name: usr-share-ca-certificates
      readOnly: true
  hostNetwork: true
  priority: 2000001000
  priorityClassName: system-node-critical
  securityContext:
    seccompProfile:
      type: RuntimeDefault
  volumes:
  - hostPath:
      path: /opt/app/audit
      type: ""
    name: audit-logs
  - hostPath:
      path: /etc/kubernetes/audit-policy


# File: falco-patch.yml
- hosts: kube_control_plane
  tasks:
    # 1. Ensure Falco audit config directory exists
    - name: Ensure Falco audit config directory exists
      file:
        path: /etc/kubernetes/
        state: directory
        mode: 0755

    # 2. Deploy Falco audit webhook config file
    - name: Deploy Falco audit webhook config
      copy:
        content: |
          apiVersion: v1
          kind: Config
          clusters:
            - name: falco-webhook
              cluster:
                server: http://falco-webhook.kube-system.svc:31007/k8s-audit
                insecure-skip-tls-verify: true
          users:
            - name: falco-webhook
          contexts:
            - context:
                cluster: falco-webhook
                user: falco-webhook
              name: falco-webhook
          current-context: falco-webhook
        dest: /etc/kubernetes/webhook-config.yaml
        mode: 0644

    # 3. Patch kube-apiserver flags (inside command: list)
    - name: Add audit webhook flags to kube-apiserver
      blockinfile:
        path: /etc/kubernetes/manifests/kube-apiserver.yaml
        marker: "# {mark} FALCO AUDIT WEBHOOK FLAGS"
        insertafter: '^\s*-\s*kube-apiserver'  # Regex matching line with "- kube-apiserver"
        block: |
                  - --audit-webhook-config-file=/etc/kubernetes/webhook-config.yaml
                  - --audit-webhook-batch-max-wait=10ms
                  - --audit-webhook-initial-backoff=10ms

    # 4. Add Falco audit webhook volume (inside volumes: list)
    - name: Add Falco audit webhook volume
      blockinfile:
        path: /etc/kubernetes/manifests/kube-apiserver.yaml
        marker: "# {mark} FALCO AUDIT VOLUME"
        insertafter: '^  volumes:'  # 'volumes:' is indented 2 spaces in your manifest
        block: |
          - name: falco-webhook-config
            hostPath:
              path: /etc/kubernetes/webhook-config.yaml
              type: File

    # 5. Add Falco audit webhook volume mount (inside container's volumeMounts:)
    - name: Add Falco audit webhook volume mount
      blockinfile:
        path: /etc/kubernetes/manifests/kube-apiserver.yaml
        marker: "# {mark} FALCO AUDIT VOLUME MOUNT"
        insertafter: '^        volumeMounts:'  # 'volumeMounts:' is indented 8 spaces in your manifest
        block: |
              - name: falco-webhook-config
                mountPath: /etc/kubernetes/webhook-config.yaml
                readOnly: true

    # 6. Restart kubelet to apply changes
    - name: Restart kubelet
      systemd:
        name: kubelet
        state: restarted
