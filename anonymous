# Check ClusterRoleBindings referencing the anonymous user or group
kubectl get clusterrolebindings -o json | \
  jq '.items[] | select(.subjects[]?.name == "system:anonymous" or .subjects[]?.name == "system:unauthenticated") | .metadata.name'

# Check RoleBindings in all namespaces
kubectl get rolebindings --all-namespaces -o json | \
  jq '.items[] | select(.subjects[]?.name == "system:anonymous" or .subjects[]?.name == "system:unauthenticated") | .metadata.name + " in namespace " + .metadata.namespace'

# clusterrole-readonly.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: anonymous-readonly
rules:
- apiGroups: [""]
  resources: ["healthz", "version", "metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: anonymous-readonly
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: anonymous-readonly
subjects:
- kind: User
  name: system:anonymous


CERT_FILE="/etc/kubernetes/pki/admin.crt"
KEY_FILE="/etc/kubernetes/pki/admin.key"
CA_FILE="/etc/kubernetes/pki/ca.crt"

curl --cacert $CA_FILE \
     --cert $CERT_FILE \
     --key $KEY_FILE \
     https://localhost:6443/livez


openssl verify -CAfile $CA_FILE $CERT_FILE

openssl x509 -in $CERT_FILE -noout -dates

openssl genrsa -out user.key 2048
openssl req -new -key user.key -out user.csr -subj "/CN=test-user/O=my-group"

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: test-user-livez-access
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:kubelet-api-reader  # Predefined role for health checks
subjects:
- kind: User
  name: test-user  # Must match the certificate's CN
  apiGroup: rbac.authorization.k8s.io


# Generate new admin cert/key (adjust SUBJECT and DAYS as needed)
sudo openssl req -new -newkey rsa:2048 -nodes -keyout admin.key -out admin.csr \
  -subj "/CN=admin/O=system:masters"
sudo openssl x509 -req -in admin.csr -CA /etc/kubernetes/pki/ca.crt \
  -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out admin.crt -days 365

# Update kubeconfig to use the new certs
kubectl config set-credentials admin \
  --client-certificate=admin.crt \
  --client-key=admin.key \
  --embed-certs=true

# Use the kubelet's credentials to query the API server
curl -k --cert /var/lib/kubelet/pki/kubelet-client-current.pem --key /var/lib/kubelet/pki/kubelet-client-current.pem https://<API_SERVER>:6443/healthz


