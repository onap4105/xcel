
2025-05-15 09:13:10.981 Uncaught app execution
Traceback (most recent call last):
  File "c:\Users\hg4105\myworkspace\streamlit\.venv\Lib\site-packages\streamlit\runtime\scriptrunner\exec_code.py", line 121, in exec_func_with_error_handling
    result = func()
             ^^^^^^
  File "c:\Users\hg4105\myworkspace\streamlit\.venv\Lib\site-packages\streamlit\runtime\scriptrunner\script_runner.py", line 591, in code_to_exec
    exec(code, module.__dict__)
  File "C:\Users\hg4105\myworkspace\streamlit\app2.py", line 41, in <module>
    Server._handlers[0][1][-1] = (r"/component/(.*)", FixedComponentRequestHandler, {})
    ^^^^^^^^^^^^^^^^
AttributeError: type object 'Server' has no attribute '_handlers'


import streamlit as st
from streamlit_oauth import OAuth2Component
import os
import logging
from pathlib import Path
from dotenv import load_dotenv

# Configure logging
logging.basicConfig(level=logging.DEBUG)

# --- Environment Variables ---
env_path = Path('.') / '.env'
load_dotenv(dotenv_path=env_path)

# Clean Azure AD URLs (critical fix)
AUTHORIZE_URL = os.getenv('AUTHORIZE_URL').replace("https://", "oauth/")
TOKEN_URL = os.getenv('TOKEN_URL').replace("https://", "oauth/")
CLIENT_ID = os.getenv('CLIENT_ID')
CLIENT_SECRET = os.getenv('CLIENT_SECRET')
REDIRECT_URI = os.getenv('REDIRECT_URI')
SCOPE = os.getenv('SCOPE')

# --- OAuth Configuration ---
oauth2 = OAuth2Component(
    client_id=CLIENT_ID,
    client_secret=CLIENT_SECRET,
    authorize_url=AUTHORIZE_URL,
    token_url=TOKEN_URL,
    refresh_token_url=None,
    revoke_token_url=None,
    client_kwargs={
        "scope": SCOPE,
        "redirect_uri": REDIRECT_URI
    }
)

# --- Authentication Flow ---
if 'token' not in st.session_state:
    # Use raw HTML button to avoid path resolution issues
    result = oauth2.authorize_button(
        "Login with Microsoft",
        redirect_uri=REDIRECT_URI,
        scope=SCOPE,
        key="azure_auth",
        extras_params={"domain_hint": "organizations"}
    )
    
    if result and 'token' in result:
        st.session_state.token = result['token']
        st.rerun()
else:
    token = st.session_state.token
    st.subheader("Current Token:")
    st.json(token)
    
    if st.button("Refresh Token"):
        try:
            new_token = oauth2.refresh_token(token)
            st.session_state.token = new_token
            st.rerun()
        except Exception as e:
            st.error(f"Token refresh failed: {str(e)}")
